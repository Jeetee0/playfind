{"version":3,"sources":["hoc/Layout/Layout.js","components/Questions/Question/Question.js","components/Answers/Answer/Answer.js","components/Answers/Answers.js","hoc/Questionboxes/Questionbox/Questionbox.js","container/Playfind/Playfind.js","App.js","serviceWorker.js","index.js"],"names":["Layout","react_default","a","createElement","Fragment","className","this","props","children","Component","Question","questionText","Answer","type","nextquestionid","nextQuestionId","onClick","onAnswerClick","text","Answers","answers","map","Answers_Answer_Answer","key","Id","Text","NextQuestionId","solutionId","SolutionId","Questionbox","Questions_Question_Question","question","QuestionText","components_Answers_Answers","data","require","Playfind","state","activeQuestionId","event","_this","setState","parseInt","target","attributes","value","axios","get","then","response","react_transition_group","timeout","classNames","Questionboxes_Questionbox_Questionbox","Questions","App","hoc_Layout_Layout","container_Playfind_Playfind","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0qUAeeA,0LATX,OACEC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KAEEH,EAAAC,EAAAC,cAAA,QAAME,UAAU,UAAUC,KAAKC,MAAMC,kBALxBC,cCONC,SARE,SAAAH,GACf,OACEN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACbJ,EAAAC,EAAAC,cAAA,SAAII,EAAMI,iBCWDC,SAdA,SAAAL,GACb,OACEN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,UACEU,KAAK,SACLC,eAAgBP,EAAMQ,eACtBC,QAAST,EAAMU,eAEdV,EAAMW,SCOAC,SAdC,SAAAZ,GACd,IAAIa,EAAUb,EAAMa,QAAQC,IAAI,SAAAnB,GAAC,OAC/BD,EAAAC,EAAAC,cAACmB,EAAD,CACEC,IAAKrB,EAAEsB,GACPN,KAAMhB,EAAEuB,KACRV,eAAgBb,EAAEwB,eAClBC,WAAYzB,EAAE0B,WACdX,cAAeV,EAAMU,kBAIzB,OAAOhB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAWe,KCMpBS,SAfK,SAAAtB,GAElB,OACEN,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACbJ,EAAAC,EAAAC,cAAC2B,EAAD,CAAUnB,aAAcJ,EAAMwB,SAASC,eACvC/B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAC8B,EAAD,CACEb,QAASb,EAAMwB,SAASZ,QACxBF,cAAeV,EAAMU,6CCP3BiB,EAAOC,EAAQ,IA4CJC,6MAzCbC,MAAQ,CACNC,iBAAkB,KAWpBrB,cAAgB,SAAAsB,GACdC,EAAKC,SAAS,CACZH,iBAAkBI,SAChBH,EAAMI,OAAOC,WAAW9B,eAAe+B,6FAV3CC,IACGC,IAAI,8CACJC,KAAK,SAAAC,uCAcR,OACEhD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAC+C,EAAA,gBAAD,CACE7C,UAAU,GACVkB,IAAKjB,KAAK+B,MAAMC,iBAChBa,QAAS,IACTC,WAAW,QAEXnD,EAAAC,EAAAC,cAAC+C,EAAA,cAAD,CAAeC,QAAS,IAAMC,WAAW,QACvCnD,EAAAC,EAAAC,cAACkD,EAAD,CACEpC,cAAeX,KAAKW,cACpBc,SAAUG,EAAKoB,UAAUhD,KAAK+B,MAAMC,8BAjC3B7B,aCSR8C,0LAVX,OACEtD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACqD,EAAD,KACEvD,EAAAC,EAAAC,cAACsD,EAAD,eALQhD,cCMEiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.54f221ef.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Layout.css\";\n\nclass Layout extends Component {\n  render() {\n    return (\n      <>\n        {/* <div>Sidedrawer, Backdrop</div> */}\n        <main className=\"Layout\">{this.props.children}</main>\n      </>\n    );\n  }\n}\n\nexport default Layout;\n","import React from \"react\";\nimport \"./Question.css\";\n\nconst Question = props => {\n  return (\n    <div className=\"Question\">\n      <p>{props.questionText}</p>\n    </div>\n  );\n};\n\nexport default Question;\n","import React from \"react\";\nimport \"./Answer.css\";\n\nconst Answer = props => {\n  return (\n    <div className=\"Answer\">\n      <button\n        type=\"button\"\n        nextquestionid={props.nextQuestionId}\n        onClick={props.onAnswerClick}\n      >\n        {props.text}\n      </button>\n    </div>\n  );\n};\n\nexport default Answer;\n","import React from \"react\";\nimport Answer from \"./Answer/Answer\";\nimport \"./Answers.css\";\n\nconst Answers = props => {\n  let answers = props.answers.map(a => (\n    <Answer\n      key={a.Id}\n      text={a.Text}\n      nextQuestionId={a.NextQuestionId}\n      solutionId={a.SolutionId}\n      onAnswerClick={props.onAnswerClick}\n    />\n  ));\n\n  return <div className=\"Answers\">{answers}</div>;\n};\n\nexport default Answers;\n","import React from \"react\";\nimport Question from \"../../../components/Questions/Question/Question\";\nimport Answers from \"../../../components/Answers/Answers\";\n\nimport \"./Questionbox.css\";\n\nconst Questionbox = props => {\n\n  return (\n    <div className=\"Questionbox\">\n      <Question questionText={props.question.QuestionText} />\n      <div className=\"Answers\">\n        <Answers\n          answers={props.question.Answers}\n          onAnswerClick={props.onAnswerClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Questionbox;\n","import React, { Component } from \"react\";\nimport Questionbox from \"../../hoc/Questionboxes/Questionbox/Questionbox\";\nimport axios from \"axios\";\nimport {\n  CSSTransition,\n  TransitionGroup\n} from \"react-transition-group\";\nvar data = require(\"../../assets/musicfy3.json\");\n\nclass Playfind extends Component {\n  state = {\n    activeQuestionId: 3\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/posts\")\n      .then(response => {\n        //console.log(response);\n      });\n  }\n\n  onAnswerClick = event => {\n    this.setState({\n      activeQuestionId: parseInt(\n        event.target.attributes.nextquestionid.value\n      )\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <TransitionGroup\n          className=\"\"\n          key={this.state.activeQuestionId}\n          timeout={3000}\n          classNames=\"fade\"\n        >\n          <CSSTransition timeout={3000} classNames=\"fade\">\n            <Questionbox\n              onAnswerClick={this.onAnswerClick}\n              question={data.Questions[this.state.activeQuestionId]}\n            />\n          </CSSTransition>\n        </TransitionGroup>\n      </>\n    );\n  }\n}\n\nexport default Playfind;\n","import React, { Component } from \"react\";\nimport Layout from \"./hoc/Layout/Layout\";\nimport Playfind from \"./container/Playfind/Playfind\"\n\nimport \"./App.css\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Layout>\n          <Playfind></Playfind>\n        </Layout>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}